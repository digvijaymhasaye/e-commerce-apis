openapi: 3.0.0
info:
  title: Inventory Management API
  version: '1.0'
  contact:
    name: Digvijay Mhasaye
    url: colons.in
    email: digvijaymhasaye8@gmail.com
servers:
  - url: 'http://52.66.77.121:10010'
    description: Dev
  - url: 'http://localhost:10010'
    description: Local
paths:
  /users/sign-in:
    parameters: []
    post:
      summary: User Sign In
      operationId: post-users-sign-in
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithAuthResponse'
      tags:
        - Users
      description: This API will sign in user into the system
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignInRequestBody'
      security: []
  /products:
    get:
      summary: Your GET endpoint
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsResponse'
      operationId: get-products
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
        - schema:
            type: integer
            default: 1
          in: query
          name: page_no
        - schema:
            type: integer
            default: 10
          in: query
          name: page_size
        - schema:
            type: string
            default: created_at
          in: query
          name: sort_by
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: sort_order
        - schema:
            type: integer
            enum:
              - 0
              - 1
              - 2
              - 3
          in: query
          name: status
        - schema:
            type: string
          in: query
          name: search
        - schema:
            type: integer
          in: query
          name: category_id
    post:
      summary: ''
      operationId: post-products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
      tags:
        - Products
      description: This API will add new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUpdateProductModel'
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
  /products/count:
    get:
      summary: Get Products count
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
      operationId: get-products-count
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
      description: This API will return count of products
  /categories:
    get:
      summary: Get category list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'
      operationId: get-categories
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: query
          name: page_no
        - schema:
            type: integer
            default: 10
          in: query
          name: page_size
        - schema:
            type: string
            default: created_at
          in: query
          name: sort_by
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: sort_order
        - schema:
            type: integer
          in: query
          name: status
        - schema:
            type: string
          in: query
          name: search
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
      description: This API will return list of categories
      tags:
        - Categories
    post:
      summary: ''
      operationId: post-categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      category:
                        $ref: '#/components/schemas/CategoryWithImageModel'
      tags:
        - Categories
      description: This API will add new category
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCategoryModel'
  /categories/count:
    get:
      summary: Your GET endpoint
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
      operationId: get-categories-count
      description: This API will return count of categories
      parameters:
        - schema:
            type: integer
            minimum: 1
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
        - schema:
            type: integer
            enum:
              - 0
              - 1
              - 2
              - 3
          in: query
          name: status
        - schema:
            type: string
            minLength: 3
          in: query
          name: search
  /users:
    post:
      summary: Add User
      operationId: post-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithAuthResponse'
      tags:
        - Users
      description: This API will register new user into the system
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserModel'
  /images:
    post:
      summary: ''
      operationId: post-images
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddImageResponse'
      tags:
        - Images
      description: This API will upload and add new image
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                type:
                  type: integer
                description:
                  type: string
                is_copy:
                  type: integer
                  default: 0
                  enum:
                    - 0
                    - 1
              required:
                - image
                - type
            examples: {}
        description: ''
    get:
      summary: ''
      operationId: get-images
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetImagesResponse'
      description: This API will return all uploaded images
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
        - schema:
            type: integer
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
          in: query
          name: status
        - schema:
            type: string
            minLength: 3
          in: query
          name: search
        - schema:
            type: integer
            default: 1
          in: query
          name: page_no
        - schema:
            type: integer
            default: 10
          in: query
          name: page_size
        - schema:
            type: string
            default: created_at
          in: query
          name: sort_by
        - schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
          in: query
          name: sort_order
      tags:
        - Images
  /images/count:
    get:
      summary: Your GET endpoint
      tags:
        - Images
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
      operationId: get-images-count
      description: This API will return total count of all images
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
        - schema:
            type: integer
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
          in: query
          name: status
        - schema:
            type: string
            minLength: 3
          in: query
          name: search
  '/categories/{categoryId}':
    parameters:
      - schema:
          type: integer
          default: 1
        name: categoryId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      category:
                        $ref: '#/components/schemas/CategoryWithImageModel'
      operationId: get-categories-categoryId
      description: This API will return category of given id
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
    put:
      summary: ''
      operationId: put-categories-categoryId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      category:
                        $ref: '#/components/schemas/CategoryWithImageModel'
      tags:
        - Categories
      description: This API will update category
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
        - schema:
            type: integer
            enum:
              - 0
              - 1
          in: query
          name: enable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCategoryModel'
    delete:
      summary: ''
      operationId: delete-categories-categoryId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      category:
                        $ref: '#/components/schemas/CategoryWithImageModel'
      tags:
        - Categories
      description: This API will delete category of given id.
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
  '/products/{productId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
      operationId: get-products-productId
      description: This API will return product details
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
    put:
      summary: ''
      operationId: put-products-productId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
      tags:
        - Products
      description: This API will update product
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          required: true
          name: account_id
        - schema:
            type: integer
            default: 1
          in: header
          required: true
          name: user_id
        - schema:
            type: integer
            enum:
              - 0
              - 1
          in: query
          name: enable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUpdateProductModel'
    delete:
      summary: ''
      operationId: delete-products-productId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
      tags:
        - Products
      description: This API will delete product
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: user_id
          required: true
  '/otp/mobiles/{mobileNo}/send':
    parameters:
      - schema:
          type: string
        name: mobileNo
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - OTP
      responses: {}
      operationId: get-otp-mobiles-mobileNo-send
  '/otp/mobiles/{mobileNo}/resend':
    parameters:
      - schema:
          type: string
        name: mobileNo
        in: path
        required: true
    post:
      summary: ''
      operationId: post-otp-mobiles-mobileNo-resend
      responses:
        '200':
          description: OK
      tags:
        - OTP
  '/otp/mobiles/{mobileNo}/verify':
    parameters:
      - schema:
          type: string
        name: mobileNo
        in: path
        required: true
    post:
      summary: ''
      operationId: post-otp-mobiles-mobileNo-verify
      responses:
        '200':
          description: OK
      tags:
        - OTP
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: integer
                  maximum: 4
                  minimum: 4
  /carts:
    post:
      summary: ''
      operationId: post-carts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCartItemResponse'
      tags:
        - Carts
      description: This API will add new item to cart or update existing cart
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: customer_id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCartItemModel'
  '/carts/{cartId}/items':
    parameters:
      - schema:
          type: string
        name: cartId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - Carts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemsListResponse'
      operationId: get-carts-cartId-items
      description: This API will get list of all cart items
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
        - schema:
            type: integer
            default: 1
          in: header
          name: customer_id
          required: true
  '/carts/{cartId}/items/count':
    parameters:
      - schema:
          type: string
        name: cartId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - Carts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
      operationId: get-carts-cartId-items-count
      description: This API will return cart items count
      parameters: []
  /customers/sign-up:
    parameters: []
    post:
      security: []
      summary: ''
      operationId: post-customers-sign-up
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignUpResponse'
      parameters:
        - schema:
            type: integer
            default: 1
          in: header
          name: account_id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSignUpModel'
  /customers/sign-in:
    post:
      summary: ''
      operationId: post-customers-sign-in
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignUpResponse'
      tags:
        - Customers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
components:
  schemas:
    UserSignInRequestBody:
      title: UserSignInRequestBody
      type: object
      properties:
        email_id:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email_id
        - password
    UserWithAuthResponse:
      title: UserSignInResponseBody
      type: object
      properties:
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/UserDetailsWithAuth'
    UserDetailsWithAuth:
      title: UserDetailsWithoutAuth
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email_id:
          type: string
          format: email
        mobile_no:
          type: integer
          maximum: 10
        account_id:
          type: integer
          default: 1
          minimum: 1
        image_id:
          type: integer
          minimum: 1
        token:
          type: string
        status:
          type: integer
          default: 1
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ProductsResponse:
      title: ProductsResponse
      type: object
      properties:
        data:
          type: object
          properties:
            products:
              type: array
              items:
                $ref: '#/components/schemas/ProductWithImagesDefinition'
    ProductWithImagesDefinition:
      title: ProductWithImagesDefinition
      type: object
      properties:
        id:
          type: integer
        category_id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: string
        quantity:
          type: string
        base_quantity:
          type: string
        unit:
          type: string
        status:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageModel'
    ImageModel:
      title: ImageModel
      type: object
      properties:
        id:
          type: integer
        account_id:
          type: integer
        type:
          type: integer
        description:
          type: string
        url:
          type: string
        size:
          type: integer
        uploaded_by:
          type: integer
        is_copy:
          type: integer
        status:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CountResponse:
      title: CountResponse
      type: object
      properties:
        data:
          type: object
          properties:
            count:
              type: integer
    CategoryWithImageModel:
      title: CategoryWithImageModel
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        account_id:
          type: string
        image_id:
          type: string
        status:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        image:
          $ref: '#/components/schemas/ImageModel'
    CategoriesResponse:
      title: CategoriesResponse
      type: object
      properties:
        data:
          type: object
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/CategoryWithImageModel'
    AddUserModel:
      title: AddUserModel
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email_id:
          type: string
          format: email
        mobile_no:
          type: integer
          maximum: 10
        image_id:
          type: integer
          default: 0
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 32
      required:
        - first_name
        - last_name
        - email_id
        - mobile_no
        - account_id
        - password
    AddImageResponse:
      title: AddImageResponse
      type: object
      properties:
        data:
          type: object
          properties:
            image:
              $ref: '#/components/schemas/ImageModel'
    GetImagesResponse:
      title: GetImagesResponse
      type: object
      properties:
        data:
          type: object
          properties:
            images:
              type: array
              items:
                $ref: '#/components/schemas/ImageModel'
    GetImageResponse:
      title: GetImageResponse
      type: object
      properties:
        data:
          type: object
          properties:
            image:
              $ref: '#/components/schemas/ImageModel'
    AddCategoryModel:
      title: AddCategoryModel
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        image_id:
          type: integer
    ProductResponse:
      title: ProductResponse
      type: object
      properties:
        data:
          type: object
          properties:
            product:
              $ref: '#/components/schemas/ProductWithImagesDefinition'
    AddUpdateProductModel:
      title: AddUpdateProductModel
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        quantity:
          type: integer
        unit:
          type: string
        category_id:
          type: integer
        base_quantity:
          type: integer
        image_id:
          type: integer
    AddCartItemModel:
      title: AddCartItemModel
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: number
          format: double
      required:
        - product_id
        - quantity
    AddCartItemResponse:
      title: AddCartItemResponse
      type: object
      properties:
        data:
          type: object
          properties:
            cart:
              type: object
              properties:
                id:
                  type: string
                cart_id:
                  type: integer
                product_id:
                  type: integer
                quantity:
                  type: integer
                status:
                  type: integer
                created_at:
                  type: string
                  format: date-time
                updated_at:
                  type: string
                  format: date-time
    CartItemWithProductModel:
      title: CartItemModel
      type: object
      properties:
        id:
          type: integer
        cart_id:
          type: string
        product_id:
          type: string
        quantity:
          type: string
        status:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        product:
          $ref: '#/components/schemas/ProductWithImagesDefinition'
    CartItemsListResponse:
      title: CartItemsListResponse
      type: object
      properties:
        data:
          type: object
          properties:
            cart_products:
              type: array
              items:
                $ref: '#/components/schemas/CartItemWithProductModel'
    CustomerSignUpModel:
      title: CustomerSignUpModel
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        mobile_no:
          type: integer
          minimum: 10
          maximum: 10
      required:
        - first_name
        - last_name
        - mobile_no
    CustomerDetailsModel:
      title: CustomerDetailsModel
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        mobile_no:
          type: string
        is_mobile_verified:
          type: string
        city:
          type: string
        state:
          type: string
        status:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    CustomerSignUpResponse:
      title: CustomerSignUpResponse
      type: object
      properties:
        data:
          type: object
          properties:
            customer:
              $ref: '#/components/schemas/CustomerDetailsModel'
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      description: ''
security:
  - Authorization: []
